# app.py - Optimized Non-Chat Version
import streamlit as st
import os
import json
import google.generativeai as genai
from src.parser import parse_uploaded_file # Assuming this file exists and works as intended

# ------------------------------
#   Language & Configuration Setup
# ------------------------------
LOCALE_DIR = "locales"

LANGUAGES = {
    "en": "English",
    "es": "Español",
    "ar": "العربية",
    "fr": "Français",
    "pt": "Português",
    "ru": "Русский",
    "zh": "中文",
    "ja": "日本語",
    "hi": "हिन्दी"
}

# Use Streamlit's cache to load strings only once per language selection
@st.cache_data
def load_strings(lang_code):
    """Load translation strings from locales folder."""
    file_path = os.path.join(LOCALE_DIR, f"{lang_code}.json")
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except (IOError, json.JSONDecodeError) as e:
            st.error(f"Error loading language file: {e}")
            return {}
    return {}

# ------------------------------
#   Configure Page
# ------------------------------
st.set_page_config(page_title="FinDocGPT", layout="wide")

# Custom CSS for a more polished look
st.markdown("""
<style>
    .reportview-container .main .block-container {
        max-width: 1200px;
        padding-top: 2rem;
        padding-right: 2rem;
        padding-left: 2rem;
        padding-bottom: 2rem;
    }
    h1 {
        color: #2c3e50;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        font-weight: 700;
        text-align: center;
        letter-spacing: -1px;
    }
    h3 {
        color: #34495e;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        font-weight: 600;
        border-bottom: 2px solid #ecf0f1;
        padding-bottom: 10px;
    }
    .stButton>button {
        color: white;
        background-color: #3498db;
        border-radius: 12px;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: bold;
        transition: all 0.3s ease;
        cursor: pointer;
    }
    .stButton>button:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
    }
    .stSpinner > div > div {
        border-top-color: #3498db !important;
    }
    .result-container {
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        padding: 1rem;
        margin-top: 1rem;
        background-color: #f8f8f8;
    }
</style>
""", unsafe_allow_html=True)

# ------------------------------
#   Configure Gemini API
# ------------------------------
genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
MODEL_NAME = "gemini-1.5-flash"

# Define the analysis function to encapsulate the logic
def analyze_document(document_text, user_prompt, selected_lang_code):
    """
    Sends a combined prompt to the Gemini API and returns the analysis result.
    Includes robust error handling and prompt construction.
    """
    full_prompt = (
        f"You are a financial analyst. The user has provided a document and a question. "
        f"Keep your response concise and to the point. The user's language preference is '{selected_lang_code}'.\n\n"
        f"Document: {document_text}\n\n"
        f"User's Question: {user_prompt}"
    )
    
    try:
        model = genai.GenerativeModel(MODEL_NAME)
        response = model.generate_content(full_prompt)
        if response.candidates and response.candidates[0].content.parts:
            return response.candidates[0].content.parts[0].text
        else:
            return "No content was generated by the model. Please try a different prompt."
    except genai.types.generation_types.BlockedPromptException:
        return "I am sorry, but your prompt was flagged for safety. Please try rephrasing."
    except Exception as e:
        return f"An error occurred: {e}. Please check your API key and try again."

# Callback function to set the prompt text
def set_prompt(prompt_text):
    st.session_state.user_prompt = prompt_text

# ------------------------------
#   UI Layout and Session State
# ------------------------------
# Initialize session state for document content and analysis result
if "document_text" not in st.session_state:
    st.session_state.document_text = ""
if "is_document_loaded" not in st.session_state:
    st.session_state.is_document_loaded = False
if "analysis_result" not in st.session_state:
    st.session_state.analysis_result = ""
if "user_prompt" not in st.session_state:
    st.session_state.user_prompt = ""

# Sidebar language selection
st.sidebar.title("Language")
selected_lang_name = st.sidebar.selectbox("Choose a language:", list(LANGUAGES.values()))
selected_lang_code = [key for key, value in LANGUAGES.items() if value == selected_lang_name][0]
strings = load_strings(selected_lang_code)

# Header
st.title(strings.get("app_title", "FinDocGPT"))
st.markdown(f"### {strings.get('subtitle', 'AI-powered financial analyst.')}")
st.markdown("---")

# ------------------------------
#   Document Upload Section
# ------------------------------
st.subheader(strings.get("section_1_header", "1. Upload a Document or Paste Text"))

col1, col2 = st.columns(2)

with col1:
    uploaded_file = st.file_uploader(
        strings.get("upload_label", "Upload a PDF, TXT, or HTML file:"),
        type=strings.get("upload_formats", ["pdf", "txt", "html"]),
        key="file_uploader"
    )

with col2:
    pasted_text = st.text_area(
        strings.get("or_text", "Or, paste the document text here:"),
        height=300,
        key="text_area"
    )

# Logic to load document text into session state
if uploaded_file and not st.session_state.is_document_loaded:
    with st.spinner("Parsing document..."):
        st.session_state.document_text = parse_uploaded_file(uploaded_file)
        st.session_state.is_document_loaded = True
        st.success("Document loaded successfully! You can now ask a question.")
elif pasted_text and not st.session_state.is_document_loaded:
    st.session_state.document_text = pasted_text
    st.session_state.is_document_loaded = True
    st.success("Text pasted successfully! You can now ask a question.")

# Reset button to clear all session state
if st.button("Reset Session"):
    st.session_state.document_text = ""
    st.session_state.is_document_loaded = False
    st.session_state.analysis_result = ""
    st.session_state.user_prompt = ""
    st.rerun()

st.markdown("---")

# ------------------------------
#   Analysis Prompt Section
# ------------------------------
st.subheader(strings.get("section_2_header", "2. Ask the AI a question about the document"))

# Pre-defined prompts that populate the text area
st.markdown("##### Quick Prompts:")
prompt_cols = st.columns(3)
quick_prompts = [
    strings.get("prompt_summarize", "Summarize the main points."),
    strings.get("prompt_risks", "Identify key risks and opportunities."),
    strings.get("prompt_figures", "Extract all financial figures in a table.")
]
for i, prompt_text in enumerate(quick_prompts):
    # Use a callback function to set the prompt, avoiding the need for a full rerun
    prompt_cols[i].button(
        prompt_text, 
        key=f"quick_prompt_{i}",
        on_click=set_prompt,
        args=(prompt_text,)
    )

user_prompt = st.text_area(
    strings.get("prompt_label", "Enter your analysis prompt here:"),
    value=st.session_state.user_prompt,
    placeholder=strings.get("prompt_placeholder", "e.g., 'Summarize the main risks in 3 bullet points.'"),
    height=100,
    key="user_prompt_area"
)

# Analysis Button
if st.button(strings.get("analyze_button", "Analyze Document")):
    if not st.session_state.document_text:
        st.error(strings.get("error_file_upload", "Please upload a file or paste text to analyze."))
    elif not user_prompt:
        st.error(strings.get("error_prompt", "Please enter a prompt for the analysis."))
    else:
        with st.spinner(strings.get("loading_message", "Analyzing your document with AI...")):
            analysis_result = analyze_document(st.session_state.document_text, user_prompt, selected_lang_code)
            st.session_state.analysis_result = analysis_result

# Display analysis result
if st.session_state.analysis_result:
    st.subheader(strings.get("result_header", "✨ Analysis Result"))
    st.markdown(f'<div class="result-container">{st.session_state.analysis_result}</div>', unsafe_allow_html=True)


st.markdown("---")

# Disclaimer
st.markdown(strings.get(
    "disclaimer",
    "⚠️ **Disclaimer:** This tool is for demonstration purposes only and should not be used for making financial decisions."
))
